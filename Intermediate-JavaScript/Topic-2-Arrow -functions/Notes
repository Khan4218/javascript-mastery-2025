🚀 Topic 2: Arrow Functions (=>)
🔍 Why use arrow functions?
Arrow functions are a shorter syntax for writing functions — and they behave differently with this.

✅ Syntax Comparison

🧾 Traditional Function:

function add(a, b) {
  return a + b
}

⚡ Arrow Function:

const add = (a, b) => {
  return a + b
}
<!-- same output less typing!  -->

1. ✅ No parentheses if only one parameter:

const greet = name => {
  console.log("Hi " + name)
}

2. ✅ Implicit return if one line:
const square = x => x * x
<!-- No need for return or {} — it returns automatically! -->

3. ❗ Multiple lines need {} and return:
const sum = (a, b) => {
  const result = a + b
  return result
}

4. ❗ No own this, arguments, or super
Arrow functions do not bind their own this.
They inherit this from the outer scope.

🧠 Arrow Functions and this
🔥 Arrow functions do NOT have their own this.
They inherit this from the surrounding (lexical) scope.

✅ Quick Recap of Key Differences
| Feature            | Regular Function            | Arrow Function (`=>`)         |
| ------------------ | --------------------------- | ----------------------------- |
| `this` binding     | Dynamic (depends on caller) | Lexical (inherits from outer) |
| `arguments` object | Available                   | Not available                 |
| Short syntax       | ❌                           | ✅                             |
| Method definitions | ✅ Recommended               | ❌ Avoid (for methods)         |

✅ Syntax Rules
| Rule                              | Description     | Example                      |
| --------------------------------- | --------------- | ---------------------------- |
| No parentheses for one param      | Allowed         | `x => x * 2`                 |
| Parentheses for 0 or 2+ params    | Required        | `(a, b) => a + b`            |
| No `return` needed for one-liners | Implicit return | `x => x + 1`                 |
| Braces require `return`           | If using `{}`   | `(x, y) => { return x + y }` |

⚠️ When to Avoid Arrow Functions
❌ As methods in objects

❌ As constructors (they can’t be used with new)

❌ When this, arguments, or super are needed

✅ Use Cases for Arrow Functions
✅ Short utility functions

✅ Callbacks (e.g. map, filter, forEach)

✅ Inside other functions (inherit this)

✅ When you don’t need your own this

✅ Quick Quiz Recap
const greet = name => \Hi, ${name}!` →greet()returnsHi, undefined!`

const fn = person.getName.bind(person)
→ Binds this to always be person

Arrow functions don’t have this, so using them as object methods results in undefined.

🏁 Final Takeaways
✅ Arrow functions are concise and powerful

❌ But don’t use them where this is important

✅ Use them for callbacks and inline functions

✅ Avoid them in object methods and constructors